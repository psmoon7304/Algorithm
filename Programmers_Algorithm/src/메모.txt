.getClass().getName() // 타입확인

-------------------------------
HashMap / Key

Map<String, Integer> test = new HashMap<>();
test.isEmpty() // map이 비어있는지 확인해서 bool값 반환
test.put();
test.get(); // 값이 없는 경우 null 반환
test.getOrDefault(a, 0) // test에서 a라는 key가 존재하는지 보고 있다면 해당 키의 value 반환 없다면 0 출력
// 응용
for(String a : name) {
    test.put(test.getOrDefault(a, 0) + 1);
}
// a라는 값이 test에 있는지 판단하고 있다면 현재 a라는 키의 벨류를 반환하고 1을 더함
// 없다면 0으로 반환하고 1을 더함
test.putIfAbsent(key,value); // Key 값이 존재하는 경우 Map의 Value의 값을 반환하고, Key값이 존재하지 않는 경우 Key와 Value를 Map에 저장하고 Null을 반환
test.containsKey() // 특정 키가 있는지 판단 get과 다른점은 get은 특정 키가 없다면 null을 반환하지만 containsKey는 bool값을 반환
test.size()
test.replace("apple", 200); // replace(key, newValue) 기존에 있을 때만 200으로 바꿈
test.replace("apple", 100, 200); // replace(key, oldValue, newValue) apple 값이 100일 때만 200으로 바꿈

HashSet<Integer> test = new HashSet<>();
test.add(); // 중복 요소를 알아서 제거함
test.contains(); // 특정 값이 있는지 bool 형태로 반환

Map<String, Integer> map = new HashMap<>();
map.put("apple", 3);
map.put("banana", 2);
map.put("cherry", 5);

for (Map.Entry<String, Integer> entry : map.entrySet()) { //HashMap.Entry도 가능 단 위에도 Map이 아닌 HashMap
    System.out.println(entry.getKey() + " = " + entry.getValue());
}
//Key Value를 출력함
-------------------------------
Math
Math.ceil() // 올림
Math.round() // 반올림
Math.floor() // 버림
Math.pow(a,b) // a의 b제곱
Math.sqrt(a) // a의 제곱근 구함 -> 반환타입 double
Math.abs() // 절대값
Math.min(a,b) // a b 중 작은 값
Math.max(a,b) // a b 중 큰 값
-------------------------------
String 문자열
String.contains() // 특정 문자열이 있는지 확인
String a = "hello";
a.contains("ll"); // True

String.toLowerCase() // 문자열을 소문자로 전환
String.toUpperCase() // 문자열을 대문자로 전환
String.toCharArray() //문자열을 배열로 전환
String.valueOf() // 다른 타입을 문자열로 전환
String.charAt(index) // 문자 하나를 가져옴 (주의 : String 함수임)
String.split("value"); // 기준 문자를 기점으로 자름 이때 return 타입은 배열
String.substring(indexA,indexB) // A부터 B까지 값 슬라이싱
예시)
String text = "abcdefg";
text.substring(1,4); // bcd
text.substring(4,5); // e
text.substring(4); // efg

String text = "Hello World";
text.replace("Hello", "Good"); // "Good World"
text.replace("Good ", ""); // "World"

String text = "Hello World";
text.indexOf("o"); // 4가 나옴

//문자열 오름차순 정렬 저장법
String skip = "zebra";
char[] arr = skip.toCharArray();  // ['z', 'e', 'b', 'r', 'a']
Arrays.sort(arr);                 // ['a', 'b', 'e', 'r', 'z']
String sorted = new String(arr);  // "aberz"

-------------------------------
Integer.parseInt() // Int 타입으로 변환
Long.parseLong() // Long 타입으로 변환
-------------------------------
foreach
int[] rank = [1,2,3,4];
for(int a : rank)
-------------------------------
숫자를 문자(char)로 출력하는법
int i = 5;
System.our.println((char)(i + '0'));
// 그냥 I 출력시 아스키코드 값 출력 따라서 + '0' 를 해줘야함
-------------------------------
배열 Array
int[] arr = {1,2,3};
System.out.println(Arrays.toString(arr)); // 출력시 [1,2,3] 이렇게 나오게 만들어줌
-------------------------------
ArrayList
List<Integer> rank = new ArrayList<>();
List<List<Integer>> rank = new ArrayList<>(); // 2차원 (중첩) arrayList
rank.add(); // 값 추가
rank.get(); // 값 출력
rank.set(index, value); // 인덱스 값을 벨류로 변경
rank.remove(index); // index에 해당되는 값 삭제
rank.remove(Integer.valueOf(value)); // int 타입의 value를 찾아서 삭제
rank.remove("A"); // value를 찾아서 삭제
rank.removeAll(value); // value를 찾아서 모두 삭제 인자값으로 2개이상 가능
rank.indexOf(문자, 시작위치); // 특정 문자의 index 반환 (시작위치는 생략가능)
rank.contains(); // 특정 값이 있는지 bool로 반환
System.out.println(rank); // Arrays.toString() 처럼 출력

//배열에서 substring / 슬라이싱 사용하기
int[] arr = {0, 1, 2, 3, 4, 5};
int[] arr1 = Arrays.copyOfRange(arr, 0, position); // 0부터 position 앞 요소까지만 복사

일반 배열에서 ArrayList 함수 사용하기
String[] arr = {"a","b","c"};
Arrays.asList(arr).indexOf("b");

Arrays.sort(배열) // 배열을 오름차순 정렬


//중첩의 경우 ( Solution20 참고 )
List<List<String>> player = new ArrayList<>();
List<String> info = new ArrayList<>();
info.add("홍길동");
info.add("13");
info.add("남자");
player.add(info);

player.get(0).get(1); // "13"출력

//배열을 ArrayList로 변경시 주의점
String[] arr = { "A", "B", "C" };
List<String> list = Arrays.asList(arr);
list.add("D");

에러발생 -> Arrays.asList()는 고정길이의 List를 리턴하기 때문에, 새로운 값을 추가한 경우 Exception이 발생

String[] arr = { "A", "B", "C" };
List<String> rank = Arrays.asList(arr);
rank.set(1,"A") // {"A", "A", "C"}
System.out.println(Arrays.toString(arr));

-> arr또한 A A C로 변경됨. 반대로 위 코드에서 rank.set 부분대신

String[] arr = { "A", "B", "C" };
List<String> rank = Arrays.asList(arr);
arr[1] = "C";
System.out.println(rank.get(1));

-> 위 처럼 작성하면 rank의 값도 A C C로 변경됨
// 위 처럼 동기화 시키지 않고 ArrayList를 생성하는 방법
String[] arr = { "A", "B", "C" };
List<String> rank = new ArrayList<>(Arrays.asList(arr));
rank.set(1,"A");
System.out.println(Arrays.toString(arr));

-> arr은 A B C rank는 A A C로 바뀌게 된다.

// 정수형 배열을 list로 만드는 법과 list 오름차순 정렬
int[] lost
List<Integer> list = Arrays.stream(lost).boxed().collect(Collectors.toList());
Collections.sort(list);