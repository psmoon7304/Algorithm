HashMap / Key

Map<String, Integer> test = new HashMap<>();
test.put();
test.get(); // 값이 없는 경우 null 반환
test.getOrDefault(a, 0) // test에서 a라는 key가 존재하는지 보고 있다면 해당 키의 value 반환 없다면 0 출력
// 응용
for(String a : name) {
    test.put(test.getOrDefault(a, 0) + 1);
}
// a라는 값이 test에 있는지 판단하고 있다면 현재 a라는 키의 벨류를 반환하고 1을 더함
// 없다면 0으로 반환하고 1을 더함
test.containsKey() // 특정 키가 있는지 판단 get과 다른점은 get은 특정 키가 없다면 null을 반환하지만 containsKey는 bool값을 반환
test.size()

Map<Integer> test = new HashKey<>();
test.add(); // 중복 요소를 알아서 제거함
-------------------------------
Math
Math.ceil() // 올림
Math.round() // 반올림
Math.floor() // 버림
Math.min(a,b) // a b 중 작은 값
Math.max(a,b) // a b 중 큰 값
-------------------------------
String.valueOf() // 문자열로 전환
String.charAt(index) // 문자 하나를 가져옴 (주의 : String 함수임)
String.substring(indexA,indexB) // A부터 B까지 값 슬라이싱
예시)
String text = "abcdefg";
text.substring(1,4); // bcd
text.substring(4,5); // e
text.substring(4); // efg

String text = "Hello World";
text.replace("Hello", "Good"); // "Good World"
text.replace("Good ", ""); // "World"

-------------------------------
Integer.parseInt() // Int 타입으로 변환
Long.parseLong() // Long 타입으로 변환
-------------------------------
foreach
int[] rank = [1,2,3,4];
for(int a : rank)
-------------------------------
숫자를 문자(char)로 출력하는법
int i = 5;
System.our.println((char)(i + '0'));
// 그냥 I 출력시 아스키코드 값 출력 따라서 + '0' 를 해줘야함
-------------------------------
ArrayList
List<Integer> rank = new ArrayList<>();
List<List<Integer>> rank = new ArrayList<>(); // 2차원 (중첩) arrayList
rank.add(); // 값 추가
rank.get(); // 값 출력
rank.remove(index); // index에 해당되는 값 삭제
rank.indexOf(문자, 시작위치); // 특정 문자의 index 반환 (시작위치는 생략가능)
rank.contains(); // 특정 값이 있는지 bool로 반환

일반 배열에서 ArrayList 함수 사용하기
String[] arr = {"a","b","c"};
Arrays.asList(arr).indexOf("b");


//중첩의 경우 ( Solution20 참고 )
List<List<String>> player = new ArrayList<>();
List<String> info = new ArrayList<>();
info.add("홍길동");
info.add("13");
info.add("남자");
player.add(info);

player.get(0).get(1); // "13"출력